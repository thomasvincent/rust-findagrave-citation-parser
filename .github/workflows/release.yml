name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # Validate version matches tag
  verify-version:
    name: Verify version matches tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get tag version
        id: get_tag
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Get Cargo.toml version
        id: get_cargo_version
        run: echo "CARGO_VERSION=$(grep -m1 -oP '^version = "\K[^"]+' Cargo.toml)" >> $GITHUB_OUTPUT
      
      - name: Verify versions match
        run: |
          if [ "${{ steps.get_tag.outputs.TAG_VERSION }}" != "${{ steps.get_cargo_version.outputs.CARGO_VERSION }}" ]; then
            echo "Error: Tag version ${{ steps.get_tag.outputs.TAG_VERSION }} does not match Cargo.toml version ${{ steps.get_cargo_version.outputs.CARGO_VERSION }}"
            exit 1
          fi

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: verify-version
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # If this is the first tag, get all commits
            git log --pretty=format:"- %s" > CHANGELOG_LATEST.md
          else
            # Otherwise get commits since the previous tag
            git log --pretty=format:"- %s" $PREV_TAG..HEAD > CHANGELOG_LATEST.md
          fi
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          cat CHANGELOG_LATEST.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false

  # Build binaries for multiple platforms
  build-release:
    name: Build and upload release assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: findagrave-parser-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: findagrave-parser-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: findagrave-parser-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: findagrave-parser-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: findagrave-parser-macos-arm64
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install cross-compilation tools
        if: contains(matrix.target, 'aarch64-unknown-linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Rename binary for upload
        shell: bash
        run: |
          BIN_NAME=$(grep -m1 "name.*=" Cargo.toml | cut -d\" -f2 || echo "findagrave-parser")
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/$BIN_NAME.exe ./${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/$BIN_NAME ./${{ matrix.asset_name }}
            chmod +x ./${{ matrix.asset_name }}
          fi
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  # Publish to crates.io
  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: github.repository == 'thomasvincent/rust-findagrave-citation-parser' # Only publish from the original repo
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      
      - name: Verify Cargo.toml
        run: |
          if ! grep -q "authors" Cargo.toml; then
            echo "Error: Missing required field in Cargo.toml: authors"
            exit 1
          fi
          if ! grep -q "license" Cargo.toml; then
            echo "Error: Missing required field in Cargo.toml: license"
            exit 1
          fi
          if ! grep -q "description" Cargo.toml; then
            echo "Error: Missing required field in Cargo.toml: description"
            exit 1
          fi
      
      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      
      - name: Publish to crates.io
        run: cargo publish --allow-dirty